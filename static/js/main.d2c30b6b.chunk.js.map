{"version":3,"sources":["api.js","utils/calulateColor.js","Components/Background/sky.js","Components/Background/stars.js","utils/drawStars.js","Components/Background/clouds.js","utils/drawClouds.js","utils/drawRainbow.js","Components/Background/lightning.js","utils/drawLightning.js","Components/Background/distantHills.js","utils/drawHills.js","Components/Background/ground.js","utils/drawGround.js","Components/Background/rain.js","utils/drawRain.js","Components/Background/snow.js","utils/drawSnow.js","styles/infobox.styles.js","Components/Foreground/infobox.js","styles/screen.styles.js","Components/screen.js","styles/options.styles.js","Components/Options/weatherOptions.js","Components/Options/locationOptions.js","Components/Options/optionsScreen.js","App.js","utils/useTime.js","serviceWorker.js","index.js"],"names":["getWeather","city","lat","lon","location","axios","get","then","result","data","catch","err","calculateColor","weather","time","type","clouds","all","sys","sunrise","sunset","midday","transition","coord","hue","saturation","light","rain","console","log","Sky","bgColor","style","backgroundColor","position","height","width","Stars","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","drawTheStars","stars","i","xCoord","Math","random","yCoord","brightness","progression","push","coords","x","y","count","clearRect","length","star","fillStyle","abs","sin","shadowColor","shadowBlur","beginPath","arc","PI","fill","drawStars","id","setInterval","clearInterval","ref","Clouds","windSpeed","wind","speed","cloudNum","round","bottomOfCloud","topOfCloud","xPosition","cloudArray","splice","floor","cloudSize","gap","size","moveClouds","cloud","drawTheClouds","grd","createLinearGradient","addColorStop","strokeStyle","lineWidth","moveTo","lineTo","arcTo","stroke","x2","drawClouds","drawTheRainbow","colors","color","gradient","drawRainbow","main","Lightning","illuminate","bolts","counter","pointsAlongCourse","prevX","prevY","bolt","fillRect","point","shift","drawLightning","DistantHills","useState","setBgColor","lineJoin","lineCap","w","h","drawHills","Ground","drawGround","Rain","makeItRain","rainDrops","maxRainDrops","rainColor","drop","drawRain","description","Snow","letItSnow","flakes","windspeed","maxFlakes","flake","drawSnow","Info","styled","props","Temp","p","City","input","Time","img","CityContainer","label","Pencil","InfoBox","name","setLocation","hour","minute","changeCity","textColor","temp","value","onChange","event","target","onBlur","window","innerWidth","innerHeight","Display","div","WholeScreen","Screen","newProps","OptionsBox","nav","WeatherOptionBox","LocationOptionBox","NumberInput","OrString","WeatherOptions","newValues","setNewValues","weatherDescriptions","Thunderstorm","Mist","Clear","Fog","Drizzle","Smoke","Haze","Dust","Ash","Sand","Squall","Tornado","None","newNewValues","hidden","map","key","onClick","changeWeather","LocationOptions","newCity","setNewCity","newLatitude","setNewLatitude","newLongitude","setNewLongitude","changeCoords","OptionsScreen","changeCustomTime","App","setWeather","customTime","setCustomTime","now","timezone","Date","getHours","getTime","getMinutes","midnight","useTime","a","newWeather","callGetWeather","className","parseInt","hours","minutes","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d2c30b6b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const getWeather = (city = \"Manchester\", country, lat, lon) => {\n  //Determine location\n  let location = \"\";\n  if (lat && lon) {\n    location = `lat=${lat}&lon=${lon}`;\n  } else {\n    location = `q=${city}`;\n  }\n  //Call api\n  return axios\n    .get(\n      `https://api.openweathermap.org/data/2.5/weather?${location}&appid=10a7d5cb29b8e5a868ac5018958c7c74&units=metric`\n    )\n    .then((result) => {\n      return result.data;\n    })\n    .catch((err) => {\n      return null;\n    });\n};\n\nexport const getHourlyForecast = (lat, lon) => {\n  //Determine location\n  let location = \"\";\n  if (lat && lon) {\n    location = `lat=${lat}&lon=${lon}`;\n  }\n  //Call api\n  return axios\n    .get(\n      `https://api.openweathermap.org/data/2.5/onecall?${location}&appid=10a7d5cb29b8e5a868ac5018958c7c74&units=metric`\n    )\n    .then((result) => {\n      console.log(result.data);\n    })\n    .catch((err) => {\n      return \"error\";\n    });\n};\n","export default function calculateColor(weather, time, type) {\n  //Calculate cloudiness\n  const clouds = weather.clouds.all;\n\n  const { sunrise, sunset } = weather.sys;\n  const midday = sunrise + (sunset - sunrise) / 2;\n\n  //Calculate transition time aka how long dawn and dusk last\n  const lat = weather.coord.lat;\n  const transition = (10 + lat / 2) * 60;\n\n  //Set hue\n  let hue = 0;\n  if (type === \"sky\") hue = 175;\n  if (type === \"hills\") hue = 175;\n  if (type === \"rain\") hue = 175;\n  if (type === \"cloudsTop\" || type === \"cloudsBottom\") hue = 194;\n  if (type === \"snow\") hue = 175;\n  if (type === \"ground\") hue = 135;\n\n  //Calculate saturation\n  let saturation = 75 - clouds * 0.5;\n\n  //Calculate light, should be 40 at dawn and dusk, 80 in day, 10 at night\n  let light = 50;\n  if (time < sunrise - transition) {\n    //If before pre-dawn\n    // console.log(\"night\");\n    light = 10;\n  } else if (time < sunrise) {\n    //If pre-dawn\n    // console.log(\"pre-dawn\");\n    light = 10 + ((transition - (sunrise - time)) / transition) * 30;\n  } else if (time < sunrise + transition && time <= midday) {\n    //If dawn, and before midday (this is to stop dawn extending longer than the day in high lats)\n    // console.log(\"dawn\");\n    light = 40 + (40 - ((transition - (time - sunrise)) / transition) * 40);\n  } else if (time < sunset - transition || sunset === 0) {\n    //If daytime\n    // console.log(\"daytime\");\n    light = 80;\n  } else if (time < sunset) {\n    //If dusk\n    // console.log(\"dusk\");\n    light = 80 - ((transition - (sunset - time)) / transition) * 40;\n  } else if (time < sunset + transition) {\n    //If post-dusk\n    // console.log(\"post-dusk\");\n    light = 40 - (30 - ((transition - (time - sunset)) / transition) * 30);\n  } else {\n    //If night\n    // console.log(\"night\");\n    light = 10;\n  }\n\n  //Factor in clouds\n  light -= clouds * 0.15;\n  if (light < 10) light = 10;\n\n  if (type === \"sky\") saturation -= clouds * 0.05;\n\n  //Make hills darker\n  if (type === \"hills\") {\n    light -= 40;\n    if (light < 5) light = 5;\n  }\n\n  //Make ground darker\n  if (type === \"ground\") {\n    light -= 50;\n  }\n\n  //Make snow lighter\n  if (type === \"snow\") {\n    light += 60;\n  }\n\n  //Make rain contrast\n  if (type === \"rain\") {\n    if (light < 50) {\n      light += 40;\n    } else {\n      light -= 40;\n    }\n  }\n\n  //Change text color\n  if (type === \"text\") {\n    if (light < 30) light = 100;\n    else light = 0;\n  }\n\n  //Make clouds darker at night\n  if (type === \"cloudsTop\") {\n    saturation = 5;\n    //If night\n    if (light === 10) light = 5;\n    else {\n      light = light + 75 - clouds * 0.6;\n      if (light < 5) light = 5;\n    }\n  }\n  if (type === \"cloudsBottom\") {\n    saturation = 5;\n    //If night\n    if (light === 10) light = 0;\n    else {\n      let rainLevel = weather.rain ? weather.rain[\"1h\"] : 0;\n      light = light + 25 - clouds * 0.6 - rainLevel * 10;\n      if (light < 0) light = 0;\n    }\n  }\n\n  //Change saturation of hills\n  if (type === \"hills\") {\n    saturation -= 20;\n  }\n\n  //Change saturation of ground\n  if (type === \"ground\") {\n    saturation -= 20;\n  }\n\n  console.log(type, hue, saturation, light);\n\n  return `hsl(${hue}, ${saturation}%, ${light}%)`;\n}\n","import React from \"react\";\n\nimport calculateColor from \"../../utils/calulateColor\";\n\nexport default function Sky({ weather, time }) {\n  const bgColor = calculateColor(weather, time, \"sky\");\n\n  return (\n    <div\n      style={{\n        backgroundColor: bgColor,\n        position: \"absolute\",\n        height: \"inherit\",\n        width: \"inherit\",\n      }}\n    ></div>\n  );\n}\n","import React, { useRef, useEffect } from \"react\";\n\nimport drawStars from \"../../utils/drawStars\";\n\nexport default function Stars({ weather, time, width, height }) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n\n      const { sunrise, sunset } = weather.sys;\n\n      const drawTheStars = drawStars(ctx, weather, time, height, width);\n\n      let count = 0;\n\n      let id = null;\n\n      //And if at night\n      if (time < sunrise || time > sunset) {\n        id = setInterval(() => {\n          count += 0.005;\n          drawTheStars(count);\n        }, 30);\n      } else ctx.clearRect(0, 0, width, height);\n\n      //Clear up\n      return () => {\n        if (id) clearInterval(id);\n      };\n    }\n  });\n\n  return (\n    <canvas\n      ref={canvasRef}\n      height={height}\n      width={width}\n      style={{ position: \"absolute\" }}\n    ></canvas>\n  );\n}\n","export default function drawStars(ctx, weather, time, height, width) {\n  //Create array of stars\n  const stars = [];\n\n  const clouds = weather.clouds.all;\n\n  //Add 100 stars\n  for (let i = 0; i < 200 - clouds * 2; i++) {\n    //Set random coordinates\n    const xCoord = Math.random() * width;\n    const yCoord = Math.random() * height * 0.8;\n    //Set brightness\n    const brightness = Math.random() * 10 - clouds / 10;\n    //Set progression of count, so that flickering is not in sync\n    const progression = Math.random() * 2;\n    stars.push({ coords: { x: xCoord, y: yCoord }, brightness, progression });\n  }\n\n  function drawTheStars(count) {\n    //Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    for (let i = 0; i < stars.length; i++) {\n      const star = stars[i];\n      //Fix brightness\n      if (star.brightness < 0) star.brightness = 0;\n      //Set draw colors\n      ctx.fillStyle = `hsla(56, 89%, ${star.brightness * 10}%, ${\n        Math.abs(Math.sin(count + star.progression) * star.brightness) / 10\n      })`;\n      ctx.shadowColor = \"white\";\n      ctx.shadowBlur = Math.abs(\n        Math.sin(count + star.progression) * star.brightness\n      );\n      //Draw star\n      ctx.beginPath();\n      ctx.arc(\n        star.coords.x,\n        star.coords.y,\n        star.brightness / 6,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    }\n  }\n\n  return drawTheStars;\n}\n","import React, { useRef, useEffect } from \"react\";\n\nimport drawClouds from \"../../utils/drawClouds\";\nimport drawRainbow from \"../../utils/drawRainbow\";\n\nexport default function Clouds({ weather, time, width, height }) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n\n      const { moveClouds, drawTheClouds } = drawClouds(\n        ctx,\n        weather,\n        time,\n        height,\n        width\n      );\n\n      const drawTheRainbow = drawRainbow(ctx, width, height);\n\n      const id = setInterval(() => {\n        moveClouds();\n        drawTheClouds();\n        //If rain and not too many clouds, and daylight\n        if (weather.clouds.all < 50 && weather.weather[0].main === \"Rain\")\n          if (time < weather.sys.sunset && time > weather.sys.sunrise)\n            drawTheRainbow();\n      }, 30);\n\n      return () => clearInterval(id);\n    }\n  });\n\n  return (\n    <canvas\n      ref={canvasRef}\n      height={height}\n      width={width}\n      style={{ position: \"absolute\" }}\n    ></canvas>\n  );\n}\n","import calculateColor from \"./calulateColor\";\n\nexport default function drawClouds(ctx, weather, time, height, width) {\n  let clouds = weather.clouds.all;\n\n  //Get windspeed\n  const windSpeed = weather.wind.speed / 2;\n\n  //Determine number of clouds\n  const cloudNum = Math.round(clouds / 20);\n\n  //Determine how grey the clouds are\n  let rainLevel = weather.rain ? weather.rain[\"1h\"] : 0;\n\n  const bottomOfCloud = calculateColor(weather, time, \"cloudsBottom\");\n  const topOfCloud = calculateColor(weather, time, \"cloudsTop\");\n\n  //Create array of x positions to choose from - ensures no cloud is exactly abov another\n  const xPosition = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9];\n\n  //Create clouds\n  const cloudArray = [];\n  for (let i = 0; i < cloudNum; i++) {\n    //Determine random starting x and y coord\n    //X coord must be on the screen or slightly to the left\n    const xPos = xPosition.splice(\n      Math.floor(Math.random() * xPosition.length),\n      1\n    );\n    const xCoord = xPos * (width + 100) - 100;\n    //Y coords must be spaced out along the top 60% of the screen\n    const yCoord = ((height * 0.6) / cloudNum) * i + 50;\n    //Determine size\n    const cloudSize = 200 - 10 * i + clouds;\n    //Determine gap between cloud and next cloud\n    // const gap = Math.random() * (width / 2) + width * 0.5;\n    const gap = width * 0.6;\n    cloudArray.push({\n      coords: { x: xCoord, y: yCoord },\n      size: cloudSize,\n      gap: gap,\n    });\n  }\n\n  function moveClouds() {\n    for (let i = 0; i < cloudArray.length; i++) {\n      const cloud = cloudArray[i];\n      //Move x coord to the right based on windspeed\n      cloud.coords.x += windSpeed / 65 + i / 65;\n      //If x coord goes off screen, make x coord = the second x coord\n      if (cloud.coords.x > width) cloud.coords.x -= width / 2 + cloud.gap;\n    }\n  }\n\n  function drawTheClouds() {\n    //Clear\n    ctx.clearRect(0, 0, width, height);\n    //Loop through clouds\n    for (let i = cloudArray.length - 1; i >= 0; i--) {\n      const cloud = cloudArray[i];\n      let x = cloud.coords.x;\n      const y = cloud.coords.y;\n      //Set colors\n      const grd = ctx.createLinearGradient(x, y + 10, x, y - 30);\n      grd.addColorStop(0, bottomOfCloud);\n      grd.addColorStop(1, topOfCloud);\n      ctx.fillStyle = grd;\n      //Stroke\n      ctx.strokeStyle = grd;\n      ctx.lineWidth = 1;\n      //Draw cloud\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + cloud.size, y);\n      ctx.arcTo(\n        x + cloud.size * 0.95,\n        y - cloud.size * 0.8,\n        x + cloud.size * 0.9,\n        y - cloud.size * 0.1,\n        cloud.size * 0.05\n      );\n      ctx.arcTo(\n        x + cloud.size * 0.8,\n        y - cloud.size * 0.9,\n        x + cloud.size * 0.6,\n        y - cloud.size * 0.1,\n        cloud.size * 0.15\n      );\n      ctx.arcTo(\n        x + cloud.size * 0.55,\n        y - cloud.size * 0.6,\n        x + cloud.size * 0.4,\n        y - cloud.size * 0.08,\n        cloud.size * 0.1\n      );\n      ctx.arcTo(\n        x + cloud.size * 0.35,\n        y - cloud.size * 0.3,\n        x + cloud.size * 0.3,\n        y - cloud.size * 0.07,\n        cloud.size * 0.055\n      );\n      ctx.lineTo(x, y);\n      ctx.fill();\n      ctx.stroke();\n\n      //Draw lines to show angles\n      if (true === false) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + cloud.size, y);\n        ctx.lineTo(x + cloud.size * 0.95, y - cloud.size * 0.8);\n        ctx.lineTo(x + cloud.size * 0.9, y - cloud.size * 0.1);\n        ctx.lineTo(x + cloud.size * 0.8, y - cloud.size * 0.9);\n        ctx.lineTo(x + cloud.size * 0.6, y - cloud.size * 0.1);\n        ctx.lineTo(x + cloud.size * 0.55, y - cloud.size * 0.6);\n        ctx.lineTo(x + cloud.size * 0.4, y - cloud.size * 0.08);\n        ctx.lineTo(x + cloud.size * 0.35, y - cloud.size * 0.3);\n        ctx.lineTo(x + cloud.size * 0.3, y - cloud.size * 0.07);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n      }\n\n      //Move xCoord for the second cloud\n      let x2 = x;\n      // if (x < width / 2) x2 += width / 2 + cloud.gap;\n      // else\n      x2 -= width / 2 + cloud.gap;\n\n      //Draw second cloud\n      ctx.beginPath();\n      ctx.moveTo(x2, y);\n      ctx.lineTo(x2 + cloud.size, y);\n      ctx.arcTo(\n        x2 + cloud.size * 0.95,\n        y - cloud.size * 0.8,\n        x2 + cloud.size * 0.9,\n        y - cloud.size * 0.1,\n        cloud.size * 0.05\n      );\n      ctx.arcTo(\n        x2 + cloud.size * 0.8,\n        y - cloud.size * 0.9,\n        x2 + cloud.size * 0.6,\n        y - cloud.size * 0.1,\n        cloud.size * 0.15\n      );\n      ctx.arcTo(\n        x2 + cloud.size * 0.55,\n        y - cloud.size * 0.6,\n        x2 + cloud.size * 0.4,\n        y - cloud.size * 0.08,\n        cloud.size * 0.1\n      );\n      ctx.arcTo(\n        x2 + cloud.size * 0.35,\n        y - cloud.size * 0.3,\n        x2 + cloud.size * 0.3,\n        y - cloud.size * 0.07,\n        cloud.size * 0.055\n      );\n      ctx.lineTo(x2, y);\n      ctx.fill();\n      ctx.stroke();\n    }\n  }\n\n  return { moveClouds, drawTheClouds };\n}\n","export default function drawRainbow(ctx, width, height) {\n  function drawTheRainbow() {\n    //Clear canvas\n    // ctx.clearRect(0, 0, width, height);\n\n    //Declar colors\n    const colors = [\n      \"rgba(255, 0, 0, 0.15)\",\n      \"rgba(255, 166, 0, 0.15)\",\n      \"rgba(255, 255, 0, 0.15)\",\n      \"rgba(0, 255, 0, 0.15)\",\n      \"rgba(0, 0, 255, 0.15)\",\n      \"rgba(75, 0, 130, 0.15)\",\n      \"rgba(148, 0, 211, 0.15)\",\n    ];\n\n    //Declar lineWidth\n    ctx.lineWidth = 8;\n\n    for (let i = 0; i < colors.length; i++) {\n      const color = colors[i];\n      const gradient = ctx.createLinearGradient(\n        0,\n        height * 0.65,\n        0,\n        height * 0.65 - 250\n      );\n      gradient.addColorStop(0, \"rgba(0, 0, 0, 0)\");\n      gradient.addColorStop(1, color);\n      ctx.strokeStyle = gradient;\n      //Draw ring\n      ctx.beginPath();\n      ctx.arc(width, height * 0.65, 250 - i * 8, 0, Math.PI, true);\n      ctx.stroke();\n    }\n  }\n\n  return drawTheRainbow;\n}\n","import React, { useRef, useEffect } from \"react\";\nimport drawLightning from \"../../utils/drawLightning\";\n\nexport default function Lightning({ weather, time, width, height }) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n\n      const illuminate = drawLightning(ctx, width, height);\n\n      let id = null;\n\n      if (weather.weather[0].main === \"Thunderstorm\") {\n        id = setInterval(() => {\n          //Set random counter to feed into function\n          const counter = Math.random();\n          illuminate(counter);\n        }, 30);\n      } else ctx.clearRect(0, 0, width, height);\n\n      //Clear up\n      return () => {\n        if (id) clearInterval(id);\n      };\n    }\n  });\n\n  return (\n    <canvas\n      ref={canvasRef}\n      height={height}\n      width={width}\n      style={{ position: \"absolute\" }}\n    ></canvas>\n  );\n}\n","export default function drawLightning(ctx, width, height) {\n  //Create array of ligntning bolts\n  const bolts = [];\n\n  //Make illuminate function\n  function illuminate(counter) {\n    //Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    //Add a new bolt\n    if (counter > 0.995) {\n      //Set starting coords\n      const x = Math.random() * width;\n      const y = 0;\n      //Set course\n      const pointsAlongCourse = [{ x, y }];\n      for (let i = 1; i < 30; i++) {\n        const prevX = pointsAlongCourse[i - 1].x;\n        const prevY = pointsAlongCourse[i - 1].y;\n        pointsAlongCourse.push({\n          x: prevX + Math.random() * 20 - 10,\n          y: prevY + Math.random() * 40,\n        });\n      }\n      //Push into bolt\n      bolts.push({\n        x,\n        y,\n        brightness: 2,\n        pointsAlongCourse,\n      });\n    }\n\n    //Draw bolt\n    for (let i = 0; i < bolts.length; i++) {\n      const bolt = bolts[i];\n      //Draw flash\n      ctx.fillStyle = `hsla(308, 38%, 95%, ${bolt.brightness - 1})`;\n      ctx.fillRect(0, 0, width, height);\n      //Draw stakes\n      ctx.strokeStyle = `hsla(308, 38%, 95%, ${bolt.brightness})`;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.moveTo(bolt.x, bolt.y);\n      //Go to all points along course\n      for (let i = 0; i < bolt.pointsAlongCourse.length; i++) {\n        const point = bolt.pointsAlongCourse[i];\n        ctx.lineTo(point.x, point.y);\n      }\n      ctx.stroke();\n    }\n\n    //Modify bolts\n    for (let i = 0; i < bolts.length; i++) {\n      const bolt = bolts[i];\n      //Reduce brightness\n      bolt.brightness -= 0.04;\n      //If brightness is zero, remove bolt\n      if (bolt.brightness < 0) bolts.shift();\n    }\n  }\n\n  return illuminate;\n}\n","import React, { useRef, useEffect, useState } from \"react\";\n\nimport drawHills from \"../../utils/drawHills\";\n\nexport default function DistantHills({ weather, time, width, height }) {\n  const canvasRef = useRef(null);\n  const [bgColor, setBgColor] = useState(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n\n      //Draw things here\n      drawHills(ctx, weather, time, height, width);\n    }\n  });\n\n  //Add or remove mist\n  if (\n    (weather.weather[0].main === \"Fog\" ||\n      weather.weather[0].main === \"Mist\" ||\n      weather.weather[0].main === \"Haze\") &&\n    bgColor === null\n  ) {\n    setBgColor(\"rgba(255, 255, 255, 0)\");\n  } else if (bgColor === \"rgba(255, 255, 255, 0.5\") {\n    setBgColor(\"rgba(0, 0, 0, 0)\");\n  }\n\n  // console.log(\"mist\", bgColor);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      height={height}\n      width={width}\n      style={{ position: \"absolute\", backgroundColor: bgColor }}\n    ></canvas>\n  );\n}\n","import calculateColor from \"./calulateColor\";\n\nexport default function drawHills(ctx, weather, time, height, width) {\n  //Clear canvas\n  ctx.clearRect(0, 0, width, height);\n\n  //Calculate ground color\n  const bgColor = calculateColor(weather, time, \"hills\");\n\n  //Set drawing style\n  ctx.lineJoin = ctx.lineCap = \"round\";\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = \"black\";\n  ctx.fillStyle = bgColor;\n\n  //Set units of measurement\n  const w = width / 100;\n  const h = height / 200;\n\n  //Set points\n  ctx.beginPath();\n  ctx.moveTo(0 * w, 130 * h);\n\n  //Draw waves, with jagged variation\n  for (let i = 0; i < width + 30; i += Math.random() * 20 + 10) {\n    ctx.lineTo(\n      i,\n      120 * h + Math.sin(i / 60 - 1.7) * 50 + (Math.random() * 10 - 5)\n    );\n  }\n\n  //Close path\n  ctx.lineTo(100 * w, 200 * h);\n  ctx.lineTo(0 * w, 200 * h);\n  ctx.lineTo(0 * w, 130 * h);\n\n  //   ctx.stroke();\n  ctx.fill();\n}\n","import React, { useRef, useEffect, useState } from \"react\";\n\nimport drawGround from \"../../utils/drawGround\";\n\nexport default function Ground({ weather, time, width, height }) {\n  const canvasRef = useRef(null);\n  const [bgColor, setBgColor] = useState(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n\n      //Draw things here\n      drawGround(ctx, weather, time, height, width);\n    }\n  });\n\n  //Add or remove mist\n  if (\n    weather.weather[0].main === \"Fog\" ||\n    weather.weather[0].main === \"Mist\" ||\n    weather.weather[0].main === \"Haze\"\n  ) {\n    if (bgColor === null) setBgColor(\"rgba(255, 255, 255, 0.3)\");\n  } else if (bgColor === \"rgba(255, 255, 255, 0.3)\") {\n    setBgColor(\"rgba(255, 0, 0, 0)\");\n  }\n\n  console.log(\"mist\", bgColor);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      height={height}\n      width={width}\n      style={{ position: \"absolute\", backgroundColor: bgColor }}\n    ></canvas>\n  );\n}\n","import calculateColor from \"./calulateColor\";\n\nexport default function drawGround(ctx, weather, time, height, width) {\n  //Clear canvas\n  ctx.clearRect(0, 0, width, height);\n\n  //Calculate ground color\n  const bgColor = calculateColor(weather, time, \"ground\");\n\n  //Set drawing style\n  ctx.fillStyle = bgColor;\n\n  //Set units of measurement\n  const w = width / 100;\n  const h = height / 200;\n\n  //Set points\n  ctx.beginPath();\n  ctx.moveTo(0 * w, 130 * h);\n\n  //Draw waves\n  for (let i = 0; i <= width; i += 4) {\n    ctx.lineTo(\n      i,\n      140 * h + Math.sin(i / 35) * 10 + ((i / 4) % 2) * 30 + Math.random() * 10\n    );\n  }\n\n  //Close path\n  ctx.lineTo(100 * w, 200 * h);\n  ctx.lineTo(0 * w, 200 * h);\n  ctx.lineTo(0 * w, 130 * h);\n\n  //   ctx.stroke();\n  ctx.fill();\n}\n","import React, { useRef, useEffect, useState } from \"react\";\n\nimport drawRain from \"../../utils/drawRain\";\n\nexport default function Rain({ weather, time, width, height }) {\n  const canvasRef = useRef(null);\n  const [bgColor, setBgColor] = useState(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n\n      const makeItRain = drawRain(\n        ctx,\n        weather.weather[0].description,\n        weather.wind.speed,\n        width,\n        height,\n        weather,\n        time\n      );\n\n      let id = null;\n\n      //If rain or drizzle or storm\n      if (\n        weather.weather[0].main === \"Rain\" ||\n        weather.weather[0].main === \"Drizzle\" ||\n        weather.weather[0].main === \"Thunderstorm\"\n      ) {\n        id = setInterval(() => {\n          makeItRain();\n        }, 30);\n      } else ctx.clearRect(0, 0, width, height);\n\n      //Clear up\n      return () => {\n        if (id) clearInterval(id);\n      };\n    }\n  });\n\n  //Add or remove mist\n  if (\n    weather.weather[0].main === \"Fog\" ||\n    weather.weather[0].main === \"Mist\" ||\n    weather.weather[0].main === \"Haze\"\n  ) {\n    if (bgColor === null) setBgColor(\"rgba(255, 255, 255, 0.3)\");\n  } else if (bgColor === \"rgba(255, 255, 255, 0.3)\") {\n    setBgColor(\"rgba(255, 0, 0, 0)\");\n  }\n\n  return (\n    <canvas\n      ref={canvasRef}\n      height={height}\n      width={width}\n      style={{ position: \"absolute\", backgroundColor: bgColor }}\n    ></canvas>\n  );\n}\n","import calculateColor from \"./calulateColor\";\n\nexport default function drawRain(\n  ctx,\n  type,\n  windSpeed,\n  width,\n  height,\n  weather,\n  time\n) {\n  //Set empty array of raindrops\n  const rainDrops = [];\n\n  //Set number of raindrops to show on screen at once\n  //Light drizzle options set it to 20\n  let maxRainDrops = 10;\n  switch (type) {\n    case \"light rain\":\n    case \"shower rain\":\n    case \"light intensity shower rain\":\n    case \"ragged shower rain\":\n    case \"heavy shower rain and drizzle\":\n    case \"heavy intensity drizzle rain\":\n    case \"heavy intensity drizzle\":\n    case \"thunderstorm with light rain\":\n    case \"thunderstorm with heavy drizzle\":\n    case \"light thunderstorm\":\n      maxRainDrops = 30;\n      break;\n    case \"moderate rain\":\n    case \"freezing rain\":\n    case \"thunderstorm with rain\":\n    case \"ragged thunderstorm\":\n      maxRainDrops = 80;\n      break;\n    case \"heavy intensity rain\":\n    case \"very heavy rain\":\n    case \"heavy intensity shower rain\":\n    case \"thunderstorm with heavy rain\":\n    case \"thunderstorm\":\n    case \"heavy thunderstorm\":\n      maxRainDrops = 250;\n      break;\n    case \"extreme rain\":\n      maxRainDrops = 400;\n      break;\n    default:\n      maxRainDrops = 10;\n      break;\n  }\n\n  //Fill array with raindrops\n  for (let i = 0; i < maxRainDrops; i++) {\n    rainDrops.push({\n      x: Math.random() * width,\n      y: (height / maxRainDrops) * i,\n    });\n  }\n\n  //Calculate rain color\n  const rainColor = calculateColor(weather, time, \"rain\");\n  //Set draw style\n  ctx.strokeStyle = rainColor;\n  ctx.lineWidth = 1;\n\n  //Function to calculate the rain positions\n  const makeItRain = () => {\n    //Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    //Loop through raindrops\n    for (let i = 0; i < rainDrops.length; i++) {\n      const drop = rainDrops[i];\n      //Move drop\n      drop.y += 20;\n      drop.x += windSpeed / 5;\n      //Check not off-screen\n      if (drop.y > height) {\n        drop.y = Math.random() * -30;\n        drop.x = Math.random() * (width + windSpeed * 4) - windSpeed * 4;\n      }\n      //Draw each drop\n      ctx.beginPath();\n      ctx.moveTo(drop.x, drop.y);\n      ctx.lineTo(drop.x + windSpeed / 5, drop.y + 10);\n      ctx.stroke();\n    }\n  };\n\n  return makeItRain;\n}\n","import React, { useRef, useEffect } from \"react\";\n\nimport drawSnow from \"../../utils/drawSnow\";\n\nexport default function Snow({ weather, time, width, height }) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n\n      const letItSnow = drawSnow(ctx, weather, time, height, width);\n\n      let id = null;\n\n      //Draw things here\n      if (weather.weather[0].main === \"Snow\") {\n        id = setInterval(() => {\n          letItSnow();\n        }, 30);\n      } else ctx.clearRect(0, 0, width, height);\n\n      //Clear up\n      return () => {\n        if (id) clearInterval(id);\n      };\n    }\n  });\n\n  return (\n    <canvas\n      ref={canvasRef}\n      height={height}\n      width={width}\n      style={{ position: \"absolute\" }}\n    ></canvas>\n  );\n}\n","import calculateColor from \"./calulateColor\";\n\nexport default function drawSnow(ctx, weather, time, height, width) {\n  //Make array of snowflakes\n  const flakes = [];\n\n  //Extract type and windspeed\n  const type = weather.weather[0].description;\n  const windspeed = weather.wind.speed;\n\n  //Set number of flakes on screen at once\n  let maxFlakes = 10;\n  switch (type) {\n    case \"snow\":\n    case \"sleet\":\n    case \"shower sleet\":\n    case \"rain and snow\":\n    case \"shower snow\":\n      maxFlakes = 40;\n      break;\n    case \"heavy snow\":\n    case \"heavy shower snow\":\n      maxFlakes = 80;\n      break;\n    default:\n      maxFlakes = 10;\n      break;\n  }\n\n  //Fill array with flakes\n  for (let i = 0; i < maxFlakes; i++) {\n    //Calculate x coordinate\n    const xCoord = Math.random() * width;\n    //Calculate y coordinate\n    const yCoord = (height / maxFlakes) * i;\n    //Calculate size\n    const size = Math.random() * 3 + 1;\n    //Calculate progression - ensures snow swerving is not in sync\n    const progression = Math.random() * 4 - 2;\n    flakes.push({ coords: { x: xCoord, y: yCoord }, size, progression });\n  }\n\n  //Set colors\n  ctx.fillStyle = calculateColor(weather, time, \"snow\");\n\n  //Function to calculate snow positions\n  function letItSnow() {\n    //Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    for (let i = 0; i < flakes.length; i++) {\n      const flake = flakes[i];\n      //Move flake\n      flake.coords.y += 2;\n      flake.coords.x += windspeed / 6 + Math.sin(flake.progression);\n      flake.progression += 0.02;\n      //Check not off-screen\n      if (flake.coords.y > height) {\n        flake.coords.y = Math.random() * -30;\n        flake.size = Math.random() * 3 + 1;\n      }\n      if (flake.coords.x > width) {\n        flake.coords.x = Math.random() * -10;\n        flake.size = Math.random() * 3 + 1;\n      }\n      //Draw each flake\n      ctx.beginPath();\n      ctx.arc(flake.coords.x, flake.coords.y, flake.size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  return letItSnow;\n}\n","import styled from \"styled-components\";\n\nexport const Info = styled.main`\n  margin-top: ${(props) => `${props.height * 0.1}px`};\n  margin-left: ${(props) => `${props.width * 0.1}px`};\n  width: ${(props) => `${props.width * 0.8}px`};\n  height: ${(props) => `${props.height * 0.8}px`};\n  background-color: rgba(255, 255, 255, 0.2);\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  border-radius: 20px;\n  color: ${(props) => `${props.color}`};\n`;\n\nexport const Temp = styled.p`\n  font-size: 4em;\n  margin-top: 30;\n  margin-bottom: 0;\n`;\n\nexport const City = styled.input`\n  font-size: 1em;\n  border: 0;\n  width: 150px;\n  text-align: center;\n  background-color: rgba(0, 0, 0, 0);\n`;\n\nexport const Image = styled.img``;\n\nexport const Time = styled.p`\n  margin-top: 0;\n`;\n\nexport const CityContainer = styled.label`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 5px;\n  padding: 0;\n  margin-top: 20px;\n  margin-bottom: 5px;\n  padding-left: 20px;\n`;\n\nexport const Pencil = styled.p`\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-radius: 5px;\n  background-color: rgba(255, 255, 255, 0.2);\n`;\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n  Info,\n  Temp,\n  City,\n  Time,\n  CityContainer,\n  Pencil\n} from \"../../styles/infobox.styles\";\n\nimport calculateColor from \"../../utils/calulateColor\";\n\nexport default function InfoBox(props) {\n  const [location, setLocation] = useState(props.weather.name);\n\n  useEffect(() => {\n    setLocation(props.weather.name);\n  }, [props]);\n\n  //Extract values from props\n  let { weather, time, width, height, hour, minute, changeCity } = props;\n\n  //Function to change input value when typing\n  function changeValueLocation(event) {\n    setLocation(event.target.value);\n  }\n\n  //Add 0 to numbers if single digits\n  if (minute < 10) {\n    minute = `0${minute}`;\n  }\n  if (hour < 10) {\n    hour = `0${hour}`;\n  }\n\n  //Get text color\n  const textColor = calculateColor(weather, time, \"text\");\n\n  return (\n    <Info width={width} height={height} color={textColor}>\n      <Temp>{Math.round(weather.main.temp)}°</Temp>\n      <CityContainer>\n        <City\n          value={location}\n          onChange={changeValueLocation}\n          onBlur={() => changeCity(location)}\n        ></City>\n        <Pencil>{\"\\u270E\"}</Pencil>\n      </CityContainer>\n      <Time>\n        Last updated {hour}:{minute}\n      </Time>\n    </Info>\n  );\n}\n","import styled from \"styled-components\";\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nexport const Display = styled.div`\n  width: ${(props) => {\n    if (width >= 400) {\n      return `360px`;\n    } else return `${width}px`;\n  }};\n  height: ${(props) => {\n    if (width >= 400) {\n      return `640px`;\n    } else return `${height}px`;\n  }};\n`;\n\nexport const WholeScreen = styled.div`\n  background-color: hsl(227, 22%, 30%);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n`;\n","import React from \"react\";\n\nimport Sky from \"./Background/sky\";\nimport Stars from \"./Background/stars\";\nimport Clouds from \"./Background/clouds\";\nimport Lightning from \"./Background/lightning\";\nimport DistantHills from \"./Background/distantHills\";\nimport Ground from \"./Background/ground\";\nimport Rain from \"./Background/rain\";\nimport Snow from \"./Background/snow\";\nimport InfoBox from \"./Foreground/infobox\";\n\nimport { Display } from \"../styles/screen.styles\";\n\nexport default function Screen(props) {\n  //Limit size of screen if on a desktop\n  const newProps = { ...props };\n  if (newProps.width >= 700) {\n    newProps.width = 360;\n    newProps.height = 640;\n  }\n\n  return (\n    <Display>\n      <Sky {...newProps} />\n      <Stars {...newProps} />\n      <Clouds {...newProps} />\n      <DistantHills {...newProps} />\n      <Ground {...newProps} />\n      <Lightning {...newProps} />\n      <Rain {...newProps} />\n      <Snow {...newProps} />\n      <InfoBox {...newProps} />\n    </Display>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const OptionsBox = styled.nav`\n  margin: 20px;\n  background-color: black;\n  width: ${(props) => {\n    return `${props.width - 400}px`;\n  }};\n  max-width: 400px;\n  height: ${(props) => `${props.height * 0.9}px`};\n  padding: 10px;\n  color: white;\n`;\n\nexport const WeatherOptionBox = styled.nav`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n  height: 150px;\n`;\n\nexport const LocationOptionBox = styled.nav`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n  height: 150px;\n  margin-bottom: 20px;\n`;\n\nexport const TimeOptionBox = styled.nav`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n  height: 40px;\n  margin-bottom: 20px;\n`;\n\nexport const NumberInput = styled.input`\n  width: 50px;\n  border: 1px solid black;\n`;\n\nexport const OrString = styled.p`\n  margin: 0px;\n`;\n","import React, { useState, useEffect } from \"react\";\n\nimport { WeatherOptionBox, NumberInput } from \"../../styles/options.styles\";\n\nexport default function WeatherOptions(props) {\n  const [newValues, setNewValues] = useState({\n    main: props.weather.weather[0].main,\n    description: props.weather.weather[0].description,\n    windSpeed: props.weather.wind.speed,\n    clouds: props.weather.clouds.all,\n  });\n\n  useEffect(() => {\n    setNewValues({\n      main: props.weather.weather[0].main,\n      description: props.weather.weather[0].description,\n      windSpeed: props.weather.wind.speed,\n      clouds: props.weather.clouds.all,\n    });\n  }, [props]);\n\n  //All options for weather type\n  const weatherTypes = [\"Rain\", \"Thunderstorm\", \"Snow\", \"Mist\", \"None\"];\n\n  //All options for weather descriptions\n  const weatherDescriptions = {\n    Rain: [\n      \"drizzle\",\n      \"light rain\",\n      \"moderate rain\",\n      \"very heavy rain\",\n      \"extreme rain\",\n    ],\n    Thunderstorm: [\"light thunderstorm\", \"thunderstorm\", \"heavy thunderstorm\"],\n    Snow: [\"light snow\", \"snow\", \"heavy snow\"],\n    Mist: [],\n    Clouds: [],\n    Clear: [],\n    Fog: [],\n    Drizzle: [],\n    Smoke: [],\n    Haze: [],\n    Dust: [],\n    Ash: [],\n    Sand: [],\n    Squall: [],\n    Tornado: [],\n    None: [],\n  };\n\n  //Function to change main weather\n  function changeMain(event) {\n    //Create a shallow copy\n    const newNewValues = { ...newValues };\n    //If main weather type has changed, also change the description\n    if (event.target.value !== newNewValues.main) {\n      newNewValues.description = weatherDescriptions[event.target.value][0];\n    }\n    //Change the values given\n    newNewValues.main = event.target.value;\n    //Set newValues\n    setNewValues(newNewValues);\n  }\n\n  //Function to change the weather description\n  function changeIntensity(event) {\n    //Create a shallow copy\n    const newNewValues = { ...newValues };\n    //Change the values given\n    newNewValues.description = event.target.value;\n    //Set newValues\n    setNewValues(newNewValues);\n  }\n\n  function changeWind(event) {\n    //Create a shallow copy\n    const newNewValues = { ...newValues };\n    //Check range\n    let wind = event.target.value;\n    if (wind < 0) wind = 0;\n    if (wind > 20) wind = 20;\n    //Change the values given\n    newNewValues.windSpeed = wind;\n    //Set newValues\n    setNewValues(newNewValues);\n  }\n\n  function changeClouds(event) {\n    //Create a shallow copy\n    const newNewValues = { ...newValues };\n    //Check range\n    let clouds = event.target.value;\n    if (clouds < 0) clouds = 0;\n    if (clouds > 100) clouds = 100;\n    //Change the values given\n    newNewValues.clouds = clouds;\n    //Set newValues\n    setNewValues(newNewValues);\n  }\n\n  return (\n    <WeatherOptionBox>\n      <label>\n        Weather Type:{\" \"}\n        <select onChange={changeMain}>\n          <option hidden></option>\n          {weatherTypes.map((type) => {\n            return <option key={type}>{type}</option>;\n          })}\n        </select>\n      </label>\n      <label>\n        Intensity:{\" \"}\n        <select onChange={changeIntensity}>\n          <option hidden></option>\n          {weatherDescriptions[newValues.main].map((description) => {\n            return <option key={description}>{description}</option>;\n          })}\n        </select>\n      </label>\n      <label>\n        Cloud cover (0-100):{\" \"}\n        <NumberInput\n          type=\"number\"\n          value={newValues.clouds}\n          onChange={changeClouds}\n        ></NumberInput>\n      </label>\n      <label>\n        Wind speed (0-20):{\" \"}\n        <NumberInput\n          type=\"number\"\n          onChange={changeWind}\n          value={newValues.windSpeed}\n        ></NumberInput>\n      </label>\n      <button\n        onClick={() => {\n          props.changeWeather(newValues);\n        }}\n      >\n        Go\n      </button>\n    </WeatherOptionBox>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n  LocationOptionBox,\n  NumberInput,\n  OrString,\n} from \"../../styles/options.styles\";\n\nexport default function LocationOptions(props) {\n  const [newCity, setNewCity] = useState(props.weather.name);\n  const [newLatitude, setNewLatitude] = useState(props.weather.coord.lat);\n  const [newLongitude, setNewLongitude] = useState(props.weather.coord.lon);\n\n  useEffect(() => {\n    setNewLatitude(props.weather.coord.lat);\n    setNewLongitude(props.weather.coord.lon);\n    setNewCity(props.weather.name);\n  }, [props]);\n\n  function changeCity(event) {\n    setNewCity(event.target.value);\n  }\n\n  function changeLatitude(event) {\n    setNewLatitude(event.target.value);\n  }\n\n  function changeLongitude(event) {\n    setNewLongitude(event.target.value);\n  }\n\n  return (\n    <LocationOptionBox>\n      <label>\n        City:{\" \"}\n        <input type=\"string\" onChange={changeCity} value={newCity}></input>\n      </label>\n      <button\n        onClick={() => {\n          props.changeCity(newCity);\n        }}\n      >\n        Go\n      </button>\n      <OrString>- or -</OrString>\n      <label>\n        Latitude:{\" \"}\n        <NumberInput\n          onChange={changeLatitude}\n          value={newLatitude}\n        ></NumberInput>\n      </label>\n      <label>\n        Longitude:{\" \"}\n        <NumberInput\n          onChange={changeLongitude}\n          value={newLongitude}\n        ></NumberInput>\n      </label>\n      <button\n        onClick={() => {\n          props.changeCoords(newLatitude, newLongitude);\n        }}\n      >\n        Go\n      </button>\n    </LocationOptionBox>\n  );\n}\n","import React from \"react\";\n\nimport { OptionsBox } from \"../../styles/options.styles\";\n\nimport WeatherOptions from \"./weatherOptions\";\nimport LocationOptions from \"./locationOptions\";\nimport TimeOptions from \"./timeOptions\";\n\nexport default function OptionsScreen(props) {\n  //Extract variables\n  const {\n    weather,\n    time,\n    hour,\n    minute,\n    width,\n    height,\n    changeWeather,\n    changeCity,\n    changeCoords,\n    changeCustomTime,\n  } = props;\n\n  return (\n    <OptionsBox width={width} height={height}>\n      <h1>Scorchio</h1>\n      <p>A prototype design for a 'live' weather app.</p>\n      <h3>Options</h3>\n      <p>Input your location, or change the weather manually.</p>\n      <LocationOptions\n        weather={weather}\n        changeCity={changeCity}\n        changeCoords={changeCoords}\n      />\n      {/* <TimeOptions\n        hour={hour}\n        minute={minute}\n        time={time}\n        changeCustomTime={changeCustomTime}\n      ></TimeOptions> */}\n      <WeatherOptions weather={weather} changeWeather={changeWeather} />\n    </OptionsBox>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport { getWeather } from \"./api\";\n\nimport useTime from \"./utils/useTime\";\n\nimport Screen from \"./Components/screen\";\nimport OptionsScreen from \"./Components/Options/optionsScreen\";\n\nimport { WholeScreen } from \"./styles/screen.styles\";\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nfunction App() {\n  const [weather, setWeather] = useState(null);\n  const [customTime, setCustomTime] = useState(null);\n  let { time, hour, minute, midnight } = useTime(customTime, weather);\n\n  useEffect(() => {\n    async function callGetWeather() {\n      const newWeather = await getWeather();\n      //Extract lat and lon, call for hourly forecast\n      // const { lat, lon } = newWeather.sys;\n      setWeather(newWeather);\n    }\n\n    if (weather === null) {\n      callGetWeather();\n    }\n  });\n\n  //Functions to change the weather\n  function changeWeather(newValues) {\n    //Make a shallow copy of the existing weather\n    const newWeather = { ...weather };\n    //Loop through each of the new values and change the corresponding property\n    newWeather.weather[0].main = newValues.main;\n    newWeather.weather[0].description = newValues.description;\n    newWeather.wind.speed = parseInt(newValues.windSpeed);\n    newWeather.clouds.all = parseInt(newValues.clouds);\n    console.log(newWeather);\n    //Set the weather\n    setWeather(newWeather);\n  }\n\n  //Functions to change location\n  async function changeCity(city) {\n    const newWeather = await getWeather(city);\n    setCustomTime(null);\n    setWeather(newWeather);\n  }\n\n  async function changeCoords(lat, lon) {\n    const newWeather = await getWeather(null, null, lat, lon);\n    setWeather(newWeather);\n  }\n\n  function changeCustomTime(hours, minutes) {\n    console.log(hours, minutes);\n    const newCustomTime = midnight + hours * 3600 + minutes * 60;\n    setCustomTime(newCustomTime);\n  }\n\n  //Return\n  if (weather) {\n    //Change weather\n    // weather.clouds.all = 100;\n    //Change time\n    // time += 3600 * 15;\n    //Change windspeed\n    // weather.wind.speed = 50;\n    //Change type\n    // weather.weather[0].main = \"Snow\";\n    // weather.weather[0].description = \"light snow\";\n    console.log(weather);\n    return (\n      <div className=\"App\">\n        <WholeScreen>\n          <Screen\n            weather={weather}\n            time={time}\n            width={width}\n            height={height}\n            hour={hour}\n            minute={minute}\n            changeCity={changeCity}\n          />\n          <OptionsScreen\n            weather={weather}\n            time={time}\n            hour={hour}\n            minute={minute}\n            width={width}\n            height={height}\n            changeWeather={changeWeather}\n            changeCity={changeCity}\n            changeCoords={changeCoords}\n            changeCustomTime={changeCustomTime}\n          />\n        </WholeScreen>\n      </div>\n    );\n  } else return <h1>Loading</h1>;\n}\n\nexport default App;\n","export default function useTime(customTime, weather) {\n  //Set timezone if weather object exists\n  const timezone = weather ? weather.timezone - 3600 : 0;\n\n  //Initialise variabless\n  let now;\n  let hour;\n  let time;\n\n  if (customTime) {\n    //If time is set manually\n    //Make new date object based on customTime given\n    now = new Date(customTime * 1000);\n    //Get hour data\n    hour = now.getHours();\n    if (hour >= 24) {\n      hour -= 24;\n      // time -= 3600 * 24;\n    }\n    //Get time data\n    time = Math.round(now.getTime() / 1000);\n    //If on other side of world, reduce/increase time\n    if (timezone < -21600) time += 21600;\n    if (timezone > 21600) time -= 21600;\n  } else {\n    //If time comes from location\n    now = new Date();\n    //Add hours based on timezone\n    hour = now.getHours() + timezone / 3600;\n    //Get time data\n    time = Math.round(now.getTime() / 1000) + timezone;\n    //If next day\n    if (hour >= 24) {\n      hour -= 24;\n      time -= 3600 * 24;\n    }\n    //If on other side of world, reduce/increase time\n    if (timezone < -21600) time += 21600;\n    if (timezone > 21600) time -= 21600;\n  }\n\n  //Get minutes\n  const minute = now.getMinutes();\n  //Work out when midnight was\n  const midnight = time - (time % 60) - hour * 3600 - minute * 60;\n\n  console.log(time % 1593000000, hour, minute, midnight % 1593000000);\n\n  return { time, hour, minute, midnight };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}